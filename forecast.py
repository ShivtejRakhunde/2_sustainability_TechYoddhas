import pandas as pd
from  sklearn.ensemble import RandomForestRegressor 
import numpy as np
import seaborn as sns 
import matplotlib.pyplot as plt 
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.preprocessing import OneHotEncoder

# Load data
df = pd.read_excel('data.xlsx')

# Handle missing values
df.fillna(method='ffill', inplace=True)  # Forward fill missing values

# Encode datetime column
df['Month'] = df['DateTime'].dt.month
df['Hour'] = df['DateTime'].dt.hour

# corr=df.corr()
# plt.figure(figsize=(10,8))
# sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
# plt.title("Correlation matrix for all the variables")                                   # Prominent features sequence= wind--> air temp--> pressure
# plt.show()                                                                                                     # Prominent features sequence= wind--> air temp--> pressure

# Prepare features and target
X = df[['Air temperature | (°C)', 'Pressure | (atm)', 'Wind speed | (m/s)']]
Y = df['Power generated by system | (MW)']

# Split data into train and test sets
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# ######################################### MODEL SELECTION #####################################################################
# # here we are using multiple linear regression technique in supervised ML to predict 
# # Y=m1x1 + m2x2 + m3x3 
 # Now after using all the models and estimating the accuracy, the highest accuracy obtained is 99 % by random regressor and by the remaining regression algorithms, 
 # The obtained accuracy is between 89 and 90 
# Split data into train and test sets
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Train the Random Forest Regressor model
model = RandomForestRegressor(random_state=42)
model.fit(x_train, y_train)

# Make predictions
y_pred = model.predict(x_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)
print("R^2 Score:", r2)

# Load the new dataset
df2 = pd.read_excel('our_pred.xlsx')

# Prepare features for prediction
X_new = df2[['Air temperature | (°C)', 'Pressure | (atm)', 'Wind speed | (m/s)']]

# Make predictions for the new dataset
predicted_power_new = model.predict(X_new)

# Add the predicted power generated values as a new column in the dataset
df2['Predicted power generated | (MW)'] = predicted_power_new

# Save the predictions to excel
df2.to_excel('our_pred.xlsx', index=False)

print(df2)